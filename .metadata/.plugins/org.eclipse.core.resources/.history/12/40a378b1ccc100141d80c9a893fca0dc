//============================================================================
// Name        : RegDFA.cpp
// Author      : Deverick Simpson
// Version     :
// Copyright   : Your copyright notice
// Description : Reg To DFA in C++, Ansi-style
//============================================================================
#include "InfixToPostfix.h"
#include <iostream>
#include <stack>
#include <utility> //std::pair
#include <map>
#include <string>
#include <vector>
#include <sstream>  // requires standard library
#include <fstream>  // Note this extra header requirement whenever working with files
#include <cstdlib>
#include "Vertex.h"
#include <set>
using namespace std;

//I really dont want this to be global
int id =-1;
char empty = '#';
GraphTable gTable;
//Root Node and the ID of the finalState
std::stack<  std::pair<Vertex,Vertex> > stateHistory;


Vertex createStart(){
	   //StartingVertex
	   Vertex startVertex;
	   startVertex.thisState.stateId=++id;
	   startVertex.thisState.rootState=true;
	   startVertex.thisState.finalState=false;
	   return startVertex;
}

Vertex createFinal(){
   //EndingVertex
   Vertex endVertex;
   endVertex.thisState.stateId=++id;
   endVertex.thisState.rootState=false;
   endVertex.thisState.finalState=true;
   return endVertex;
}

void charTransition(char c){
	   //Vertex Construction
	   Vertex rootNode = createStart();
	   Vertex endNode = createFinal();
	   Edge tempEdge = Edge(endNode,c);
	   rootNode.out = &tempEdge;


	   //Save State on stack for Operator
	    std::pair<Vertex,Vertex> newPair;

	    newPair= make_pair(rootNode,endNode);
	    stateHistory.push(newPair);

	   //Figure out your table schema
	   //startVertex->thisState  and startVertex->out
	   gTable.InsertEdgeByWeight(rootNode,endNode,c);
	   gTable.numVert += 2;
	   gTable.numEdges++;
}

void concatState(){
	   //Vertex Construction
	   Vertex rootNode = createStart();
	   Vertex endNode = createFinal();

	   //Pop last two off stack
	   std::pair<Vertex,Vertex> tempPair = stateHistory.top();
	   //Vertex nodeB =  &stateHistory.top();
	   //StartNode get<0>
 	   Vertex nodeB = std::get<0>(tempPair);
	   stateHistory.pop();
	   //Remove as Start State and add as Final State
	   nodeB.thisState.rootState =false;
	   nodeB.thisState.finalState=true;

	   //Pop last two off stack
	   std::pair<Vertex,Vertex> tempPair2 = stateHistory.top();
	   //This is the Root State..Create as...Could add # transition on head and tail but nah
	   Vertex nodeA = std::get<0>(tempPair2);
	   stateHistory.pop();
	   nodeA.thisState.rootState =true;
	   nodeA.thisState.finalState =false;
	   Edge tempEdge = Edge(nodeB,empty);


	   //Not sure if i should be taking the address
	   nodeB.out = &tempEdge;

	   //Insert into Graph
	   gTable.InsertEdgeByWeight(nodeA, nodeB, empty);
	   //add gTable.numVert
	   //add gtable.numEdges
}

void kleene(){
//	   //Vertex Construction
//	   Vertex rootNode = createStart();
//	   Vertex endNode = createFinal();
//
//   	   //Pop last off stack
//	   Vertex* nodeA =  &stateHistory.top();
//	   stateHistory.pop();
//
//   	   //Add Transitions
//
//
//   	   //Add to graph


}

void orSelection(){
	   Vertex rootNode2 = createStart();
	   Vertex endNode2 = createFinal();

	   //Second Node poaced on
	   std::pair tempPair;
	   Vertex nodeB =  stateHistory.top();
	   stateHistory.pop();
	   //First Node poaced on
	   Vertex nodeA = stateHistory.top();
	   stateHistory.pop();

	   //Edge creation
	   Edge firstEdge = Edge(nodeB,empty);
	   Edge secondEdge = Edge(nodeA,empty);
	   //rootNode2->out = &firstEdge; diff between *rootNode2->out = firstEdge;

	   //New Root node attached
	   rootNode2.thisState.stateId = ++id;
	   rootNode2.out = &firstEdge;
	   rootNode2.out2 = &secondEdge;

	   //Remove old root and final state markers
	   nodeB.thisState.rootState=false;
	   nodeA.thisState.rootState=false;

	   //Final state False
	   //Also need to save index on this swap
	   nodeB.out->makeFinalFalse();
	   //Prob dont need  these
	   nodeB.out2->makeFinalFalse();

	   nodeA.out->makeFinalFalse();
	   //Prob dont need  these
	   nodeA.out2->makeFinalFalse();

	   //Add new Final Node
	   //Maintain consistent stateId
	   endNode2.thisState.stateId = ++id;
	   Edge finalEdge = Edge(endNode2,empty);
	   Edge finalEdge1 = Edge(endNode2,empty);

	   nodeB.out = &finalEdge;
	   nodeA.out = &finalEdge;
		   //EDIT
	 //  stateHistory.push(*rootNode2);
	   //Add to Graph Table
	  gTable.InsertEdgeByWeight(rootNode2,nodeB,empty);
	  gTable.InsertEdgeByWeight(rootNode2,nodeA,empty);
	  gTable.InsertEdgeByWeight(nodeB,endNode2,empty);
	  gTable.InsertEdgeByWeight(nodeA,endNode2,empty);
}


/*
 *
 * Thompsons Construction Algorithm
 * http://swtch.com/~rsc/regexp/regexp1.html
 * -------------------------------------------------------------------------------------
 */
void toNFA(string Postfix){
	//WILL NEED TO CHANGE FOR CSE STANDARDS!!
	for(char& c : Postfix) {
		   switch ( c ) {
		   	   case 'a':{
		   		   charTransition(c);
		   		 break;
		   	   }
		   	   case 'b':{
		   		   charTransition(c);
		   		 break;
		   	   }
		   	   case '*':{
		   		   // kleene();
		   		 break;
		   	   }
		   	   case '|':{
		   		  // orSelection();
		   		   break;
		   	   }
		   	   case '.':{
		   		   //concatState();
		   		 break;
		   	   }
		   	   default:{
		   		   //Should probably have some default setting this boots to
		   		 break;
		   	   }
		  }
	}
}

/*
 * File Parsing and Main Function Call
 * ----------------------------------------------------------------------------------
 */

void fileparser(){
	string STRING;
	    ifstream infile;
	    int bIndex=0;
	    string previousLine="";
	   //Change to match homework readme
	    infile.open ("/Users/Deverick/Documents/workspace/RegDFA/Libs/input.txt");

	    while(!infile.eof()) // To get you all the lines.
	    {
	        getline(infile,STRING); // Saves the line in STRING.
	        //Parsing RegEx
	        if(bIndex==0){
	        	//Calling InfixToPostfix File returning a queue
	        	InfixToPostfix sampleTest;
	        	//converToPostfix is a string===remove string creation, wasting space
	        	string postfix = sampleTest.convertToPostfix(sampleTest.addConcat(STRING));
	        	int lengthOF = postfix.size();
	        	cout <<"Here is the postfix expression "<< postfix << endl;
	        	toNFA(postfix);

	        }
	        //ONE EXTRA TEST CASE IS BEING RAN~~REMOVE--I added 1 to check on bIndex..check that
	        //Testing String Input against cases
	        //cout<<"The test case is: "<<endl;
	        if(bIndex>1){
	        	// cout<<STRING<<endl; // Prints our STRING.
	        }

	        bIndex++;
	    }
	    infile.close();
	    cout<<"We are here "<<endl;
	    //Need to return a parsing stack to manipulate the regex to a NFA
}





int main(){
	char Name[30];
	cout << "!!!Hello, what is your name!!!" << endl; // prints !!!Hello World!!!
	cin >> Name;
	ifstream ifs( "/Users/Deverick/Documents/workspace/RegDFA/Libs/input.txt" );       // note no mode needed
	   if ( ! ifs.is_open() ) {
		   cout << "Hello,"<< Name << " we have failed to open the file, check the path"<< endl;
	   }
	   else {
		   cout << "Hello, "<< Name <<" All seems to be running smooth...Here's the parsing of the file"<< endl;
		   fileparser();
	   }
	   cout<< "Closing Down"<< endl;
	return 0;
}
