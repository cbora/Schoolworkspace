#include <string>
#include "Vertex.h"
using namespace std;

Edge::Edge(Vertex *vertT, char weigh){
	weight = weigh;
	vertexTo=vertT;
}

Vertex::Vertex(){
	thisState.stateId= -1;
	thisState.finalState=false;
	thisState.rootState=false;
	out = NULL;
}


GraphTable::GraphTable(){
	numVert =0;
	numEdges=0;
	Vertex rootVertex;
}

void GraphTable::InsertVert(Vertex *startVert){
		if(NotFound(startVert)){
			//adjacencies[startVert->thisState.stateId][0].push_back(startVert);
		}
}

bool GraphTable::NotFound(Vertex *startVert){
	for(int i;i<adjacencies.size();i++){

	}
	return true;
}

//adjacencies[v][e]
void GraphTable::InsertEdgeByWeight(Vertex *vertF,Vertex *vertT, char weigh){
	//Connecting Edge vertF -----> vertT via weigh
	   Edge tempEdge = Edge(vertT,weigh);
	   //Is this right?
	   vertF->out = &tempEdge;
	   //This is how I'd want to run this
	   adjacencies[vertF->thisState.stateId]=vertF;
	   adjacencies[vertF->thisState.stateId].push_back(tempEdge);
	for(int i;i<adjacencies.size();i++){

		if(adjacencies[vertF->thisState.stateId] == vertF){
			//inserts edge from i to vertT with weigh
			adjacencies[i][0].push_back(vertF);
		}else{

		}
	}


}

void GraphTable::PrintTable(){
	for(int i=0;i<adjacencies.size();i++){
		//std::cout<< adjacencies[i]<<"State ID and "<< "gs" <<end;
	}
}
